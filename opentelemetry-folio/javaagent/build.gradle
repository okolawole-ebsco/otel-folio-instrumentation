plugins {
    id "project-conventions"

    /*
    Instrumentation agent extension mechanism expects a single jar containing everything required
    for your extension. This also includes any external libraries that your extension uses and
    cannot access from application classpath (see comment below about `javax.servlet-api` dependency).

    Thus we use Shadow Gradle plugin to package our classes and all required runtime dependencies
    into a single jar.
    See https://imperceptiblethoughts.com/shadow/ for more details about Shadow plugin.
     */
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "com.diffplug.spotless" version "6.1.2"

    id "io.opentelemetry.instrumentation.muzzle-generation" version "1.13.1-alpha"
    id "io.opentelemetry.instrumentation.muzzle-check" version "1.13.1-alpha"
}

ext {
    versions = [
            opentelemetry              : "1.9.1",
            opentelemetryAlpha         : "1.9.1-alpha",
            opentelemetryJavaagent     : "1.13.1",
            opentelemetryJavaagentAlpha: "1.13.1-alpha",
    ]

    deps = [
            autoservice: dependencies.create(group: 'com.google.auto.service', name: 'auto-service', version: '1.0')
    ]
}

archivesBaseName = 'otel-javaagent-folio'

configurations {
    /*
    We create a separate gradle configuration to grab a published Otel instrumentation agent.
    We don't need the agent during development of this extension module.
    This agent is used only during integration test.
    */
    otel
}

dependencies {
    /*
    Interfaces and SPIs that we implement. We use `compileOnly` dependency because during
    runtime all necessary classes are provided by javaagent itself.
     */
    compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:${versions.opentelemetryAlpha}")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-instrumentation-api:${versions.opentelemetryJavaagentAlpha}")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")

    //Provides @AutoService annotation that makes registration of our SPI implementations much easier
    compileOnly deps.autoservice
    annotationProcessor deps.autoservice

    compileOnly group: 'io.vertx', name: 'vertx-core', version: '4.2.2'
    compileOnly group: 'io.vertx', name: 'vertx-sql-client', version: '4.2.2'
    compileOnly group: 'io.vertx', name: 'vertx-pg-client', version: '4.2.2'
    compileOnly group: 'org.folio', name: 'domain-models-runtime', version: '33.2.3'
    compileOnly group: 'org.folio', name: 'folio-kafka-wrapper', version: '2.5.0'
    compileOnly group: 'io.opentelemetry', name: 'opentelemetry-api', version: '1.13.0'
    compileOnly group: 'io.opentelemetry', name: 'opentelemetry-semconv', version: '1.13.0-alpha'

    implementation(project(path: ":opentelemetry-folio:library"))
    implementation(project(path: ":opentelemetry-folio:library-autoconfigure"))
    implementation group: 'io.vertx', name: 'vertx-opentelemetry', version: '4.3.0-SNAPSHOT'


    //Otel Java instrumentation that we use and extend during integration tests
    otel("io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}")

    //TODO remove when start using io.opentelemetry.instrumentation.javaagent-instrumentation plugin
    add("codegen", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
    add("codegen", "ch.qos.logback:logback-classic:1.2.3")
    add("muzzleBootstrap", "io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-annotation-support:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleBootstrap", "io.opentelemetry.javaagent:opentelemetry-javaagent-instrumentation-api:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
    add("muzzleTooling", "org.slf4j:slf4j-simple:1.7.30")
}

archivesBaseName = 'folio-otel-javaagent-extensions'

//Produces a copy of upstream javaagent with this extension jar included inside it
//The location of extension directory inside agent jar is hard-coded in the agent source code
task extendedAgent(type: Jar) {
    dependsOn(configurations.otel)
    archiveFileName = "opentelemetry-javaagent.jar"
    from zipTree(configurations.otel.singleFile)
    from(tasks.shadowJar.archiveFile) {
        into "extensions"
    }

    //Preserve MANIFEST.MF file from the upstream javaagent
    doFirst {
        manifest.from(
                zipTree(configurations.otel.singleFile).matching {
                    include 'META-INF/MANIFEST.MF'
                }.singleFile
        )
    }
}

tasks {
    compileJava {
        options.release.set(11)
    }

    assemble.dependsOn(shadowJar)
}

muzzle {
//  pass {
//    group.set("io.vertx")
//    module.set("vertx-core")
//    versions.set("[4.0.0,]")
//    assertInverse.set(true)
//  }
    pass {
        group.set("org.folio")
        module.set("domain-models-runtime")
        versions.set("33.2.3")
    }
}
